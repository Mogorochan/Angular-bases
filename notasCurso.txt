Tener presente la página de documentación, para estar actualizada con los comandos. 
Hasta la version: 14.2.3, así se levantaba un proyecto en angular

    npm install -g @angular/cli

Comandos para ver la versión: ng version ó ng v
Creación:
    ng new my-first-project
    cd 01-bases
    ng serve
Recordar guardar el Node_modules en gitIgnore, ya que al clonarlo en otro lugar, 
de igual modo debemos instalar el paquete de Node (npm init) y, en este caso,
de angular(npm install -g @angular/cli):
    .gitignore (se crea la carpeta)
    /node_modules (se escribe este comando)
EN ANGULAR NO ES NECESARIO.

/*******Pasar a un directorio*********/
se llama al comando CD y se escribe el nombre del directorio:
    cd 01-bases  es lo mismo que:
    cd \Users\tic.medellin\Documents\GitHub\Angular-bases\01-bases>

/****Levantar el servidor***/
ng serve
ng serve -o //apenas esté listo, se abrirá 

/***AppComponent***/
Aquí podemos manipular el decorador @Component, este recibe un objeto como
argumento. Es importante definir los argumentos del mismo:
Selector recibe el app routing que conecta el index html a los diferentes componentes de la app.
templateUrl:  se puede escribir la ruta.
template: se escribe el código de inicio directamente. Se aconseja que sí 
se pasa de mas de 3 líneas, se cree el AppComponent.html.

Se aconseja que la lógica se mantega en el AppComponent y no en el template

/***Creación de un componente****/
Siempre describir la función del componente. 
    contador.component.ts 
Si es un nombre compuesto, separarlo por guiones:
    acumulador-simple.component.ts
-Se debe agregar la ruta de nuestro componente creado en:
    app.component.html
aplicando la siguiente sintaxis:
    <app-acumulador></app-acumulador>
-Se debe importar y agregar el componente en app.module.ts:
    import { AcumuladorComponent } from './acumulador.component';
En el  @NgModule, en las declarations:
    AcumuladorComponent
**También se pueden crear componentes de forma automática:
    ng generate component nombre de archivo ruta 
    ng g c nombre de archivo//versión simplificada
Si se desea agregar dentro de otro componente:
    ng g c componente/nombre de archivo
    ng g c heroes/listado
/*****Componentes del decorador @NgModule***/
@NgModule({
  declarations: [ // ACÁ VAN LOS COMPONENTES
    AppComponent,
    AcumuladorComponent
  ],
  imports: [//ACÁ VAN LOS MODULOS
    BrowserModule
  ],
  providers: [], // ACÁ VAN LOS SERVICIOS
  bootstrap: [AppComponent]
})

/****COMPONENTES CREADOS****/
Los módulos nos permiten encapsular el código y optimizar mejor la app.
Las declaraciones básicamente dicen qué cosas contiene este módulo.
EXPORTS: Los export significan qué cosas quiero hacer públicas
 o visibles fuera de este módulo.
 IMPORTS: modulos



/***NG'S***
-NgFor es ítil para imprimir duplicados en el HTML. Como es un For, para 
hacerlo necesito de un ciclo, arreglo o algo iterable 
-NgIf condiciona lo que se imprime en el HTML, se maneja como un IF, entoces se puede condicionar
con Else, sí no cumple nuestra primera expresión. En el Else, se puede usar el ng-template
para crear un Template Local. OJO: está en el lado del HTML, no de la lógica

/****Modulos*****/
El objetivo de los módulos es ayudarnos a agrupar componentes y piezas 
de nuestra aplicación que tienen sentido entre sí. Uno de ellos es encapsular las cosas 
y otro principal es ayudarnos con la carga perezosa (lazyLoad)

