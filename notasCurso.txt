Tener presente la página de documentación, para estar actualizada con los comandos. 
Hasta la version: 14.2.3, así se levantaba un proyecto en angular

    npm install -g @angular/cli

Comandos para ver la versión: ng version ó ng v
Creación:
    ng new my-first-project
    cd 01-bases
    ng serve
Recordar guardar el Node_modules en gitIgnore, ya que al clonarlo en otro lugar, 
de igual modo debemos instalar el paquete de Node (npm init) y, en este caso,
de angular(npm install -g @angular/cli):
    .gitignore (se crea la carpeta)
    /node_modules (se escribe este comando)
EN ANGULAR NO ES NECESARIO.

/*******Pasar a un directorio*********/
se llama al comando CD y se escribe el nombre del directorio:
    cd 01-bases  es lo mismo que:
    cd \Users\tic.medellin\Documents\GitHub\Angular-bases\01-bases>

/****Levantar el servidor***/
ng serve
ng serve -o //apenas esté listo, se abrirá 

/***AppComponent***/
Aquí podemos manipular el decorador @Component, este recibe un objeto como
argumento. Es importante definir los argumentos del mismo:
Selector recibe el app routing que conecta el index html a los diferentes componentes de la app.
templateUrl:  se puede escribir la ruta.
template: se escribe el código de inicio directamente. Se aconseja que sí 
se pasa de mas de 3 líneas, se cree el AppComponent.html.

Se aconseja que la lógica se mantega en el AppComponent y no en el template

/***Creación de un componente****/
Siempre describir la función del componente. 
    contador.component.ts 
Si es un nombre compuesto, separarlo por guiones:
    acumulador-simple.component.ts
-Se debe agregar la ruta de nuestro componente creado en:
    app.component.html
aplicando la siguiente sintaxis:
    <app-acumulador></app-acumulador>
-Se debe importar y agregar el componente en app.module.ts:
    import { AcumuladorComponent } from './acumulador.component';
En el  @NgModule, en las declarations:
    AcumuladorComponent
**También se pueden crear componentes de forma automática:
    ng generate component nombre de archivo ruta 
    ng g c nombre de archivo//versión simplificada
Si se desea agregar dentro de otro componente:
    ng g c componente/nombre de archivo
    ng g c heroes/listado
Si se quiere quitar el Test:
    ng g c onePiece/mainPage --skip-tests 
Si se quiere quitar el archivo de CSS:
	ng g c auth/pages/login --skip-tests --inline-style
/*****Componentes del decorador @NgModule***/
@NgModule({
  declarations: [ // ACÁ VAN LOS COMPONENTES
    AppComponent,
    AcumuladorComponent
  ],
  imports: [//ACÁ VAN LOS MODULOS
    BrowserModule
  ],
  providers: [], // ACÁ VAN LOS SERVICIOS
  bootstrap: [AppComponent]
})

/****COMPONENTES CREADOS****/
Los módulos nos permiten encapsular el código y optimizar mejor la app.
Las declaraciones básicamente dicen qué cosas contiene este módulo.
EXPORTS: Los export significan qué cosas quiero hacer públicas
 o visibles fuera de este módulo.
 IMPORTS: modulos

/***NG'S***
-NgFor es ítil para imprimir duplicados en el HTML. Como es un For, para 
hacerlo necesito de un ciclo, arreglo o algo iterable 
-NgIf condiciona lo que se imprime en el HTML, se maneja como un IF, entoces se puede condicionar
con Else, sí no cumple nuestra primera expresión. En el Else, se puede usar el ng-template
para crear un Template Local. OJO: está en el lado del HTML, no de la lógica

/****Modulos*****/
El objetivo de los módulos es ayudarnos a agrupar componentes y piezas 
de nuestra aplicación que tienen sentido entre sí. Uno de ellos es encapsular las cosas 
y otro principal es ayudarnos con la carga perezosa (lazyLoad)

Para crearlo manualmente, basta con crear un archivo y poner module.ts al final: heroes.module.ts
HAcer la creación del export class con el nombre del módulo, y a continuación, crear el @NgModule con las declarations, 
los import, exports y los components, también es importante importantar el CommonModule para que funciones
los NgFor, NgIf y otros métodos correctamente.

Para crear los módulos de forma automática se escribe 
    ng generate module nombre archivo
    ng g m nombre archivo
Para crearlo con el routing:
    ng g m protected --routing

/*****EVENTOS DE JS EN ANGULAR*********/
Cuando se vaya a llamar, en el HTML, se debe colocar la etiqueta estricta $
    $event

/*********Forms Module************/
se debe importar la librería FormsModule en el NgModule del módulo en el que vamos a trabajar nuestro formulario.
La ngModel directiva realizará un seguimiento del valor ingresado por el usuario 
con cada tecla presionada, y también realizará un seguimiento del estado de validez 
de ese control de formulario en particular solamente.
La ngForm directiva principal luego interactuará con todas sus ngModeldirectivas secundarias y construirá un modelo 
de todo el formulario, con todos sus valores de campo y estados de validez.

/***********NgModule**********/

[(ngModel)] acá utilizamos two data binding, las llaves [] son para establecer alguna propiedad;
los parentesis () es para emitir o escuchar eventos; al utilizarlos juntos, se pretende escuchar, emitir el evento 
y que la propiedad se enlace:
La sintaxis de enlace bidireccional de Angular es una combinación de corchetes y paréntesis, [()]. 
La [()]sintaxis combina los corchetes del enlace de propiedades [], con los paréntesis del enlace de eventos (), de la siguiente manera.
        [(ngModel)]="nuevo.nombre"

/***Herencia del componente padre hacia el hijo********/
En el componente hijo se agrega el decorador @Input() cuando el hijo necesita emitir un valor al padre 


/*****SERVICIOS*****/

Un servicio es un proveedor de datos, que mantiene lógica de acceso a ellos y operativa relacionada con el negocio 
y las cosas que se hacen con los datos dentro de una aplicación. Los servicios serán consumidos por los componentes, 
que delegarán en ellos la responsabilidad de acceder a la información y la realización de operaciones con los datos.

Sirven como singleton, es decir, una única instancia que se va a tener lo largo de todo el módulo,
en este caso el de onePiece
Es una clase que tiene un decorador de tipo: @Injectable.
La sintaxis para su generació es:
        ng generate service nombre servicio
        ng g s nombre servicio
La sintaxis para crear el servicio es:
    
     @Injectable() //decorador que se debe importar desde @angular/core
    export class OnePieceService{ //se crea la clase(en angular todo son clases, lo que difiere es el decorador) y se agrega el export para que pueda ser consumido
        constructor(){//Se agrega el contructor
    
  }
}

En el módulo en que el servicio va ser consumido, se agrega el servicio en los Providers

        @NgModule({
    declarations: [
        MainPageComponent,
        PersonajesComponent,
        AgregarComponent
    ],
    exports: [
        MainPageComponent
    ],
    imports: [
        CommonModule,
        FormsModule
    ],
    providers: [
        OnePieceService//Recordar importar el servicio
    ]
    })

El servicio es, por decirlo así, una clase abstracta en la cual ustedes van a colocar la información
y los métodos para interactuar con fuentes externas o para manipular el estado de la información en su aplicación.

Para hacer uso del servidor, utilizamos el contructor en donde queramos inyectar sus propiedades
(a esto se le conoce como inyección de dependencias):

     constructor( private OnePieceService: OnePieceService){}

Como se está inyectando la dependencia, se debe importar.

OJO: Se recomienda hacer la manipulación de la información, en el servicio, no en los componentes

/*******Angular flex-layout********/
Angular Flex Layout proporciona una API de diseño sofisticada utilizando Flexbox CSS + mediaQuery. 
Este módulo proporciona a los desarrolladores de Angular funciones de diseño de componentes mediante 
una API de diseño personalizada, observables de mediaQuery y estilos CSS DOM flexbox-2016 inyectados
Comando para instalar:
    npm i -s @angular/flex-layout @angular/cdk


import { FlexLayoutModule } from '@angular/flex-layout';
...

@NgModule({
    ...
    imports: [ FlexLayoutModule ],
    ...
});


/****JSON server***/
comando para instalar:
    npm install -g json-server
comando para levantar:
    json-server --watch db.json
Ojo, el Json server corre en el puerto 3000
    http://localhost:3000/


            /*******GUARDS******/
Los protectores de ruta de Angular son interfaces proporcionadas por Angular que, cuando se implementan,
 nos permiten controlar la accesibilidad de una ruta en función de las condiciones proporcionadas en la 
 implementación de clase de esa interfaz.
Estos son algunos tipos de protecciones angulares: CanActivate, CanActivateChild, CanLoad, CanDeactivate y Resolve

    -(CanActivate) Antes de cargar los componentes de la ruta.
    -(CanLoad) Antes de cargar los recursos (assets) de la ruta.
    -(CanDeactivate) Antes de intentar salir de la ruta actual (usualmente utilizado para evitar salir de una ruta, 
        si no se han guardado los datos).
    -(CanActivateChild) Antes de cargar las rutas hijas de la ruta actual.
Comando para crearlo:
    ng g guard nombre modulo/nombre del guard
    ng g guard auth/guards/auth

/****Operatot OF*******/
of se utiliza para emitir argumentos como valores en una secuencia y luego completar la secuencia.
A diferencia de from, no hace ningún aplanamiento o conversión y emite cada argumento con el mismo tipo que recibe como argumentos. 
Si se le pasa una matriz (incluidos los objetos similares a una matriz), una promesa y un objeto iterable, 
no se aplanará en una secuencia observable de valores. Esos argumentos se emitirán como del mismo tipo, es decir,
 una matriz, una promesa o un objeto iterable sin ninguna conversión.
Si necesita emitir elementos de forma asíncrona, el operador toma un planificador como segundo argumento.

Más información: https://indepth.dev/reference/rxjs/operators/of


import { of } from 'rxjs';
        
        of(10, 20, 30)
        .subscribe({
            next: value => console.log('next:', value),
            error: err => console.log('error:', err),
            complete: () => console.log('the end'),
        });


